image:
  # -- The repository to pull the image from.
  repository: gitlab/gitlab-ce
  # -- The docker tag, if left empty chart's appVersion will be used.
  # @default -- `.Chart.AppVersion`
  tag: ''
  # -- The pull policy for the controller.
  pullPolicy: IfNotPresent

nameOverride: ''
fullnameOverride: ''

controller:
  # -- Create a workload for this chart.
  enabled: true
  # -- Type of the workload object.
  kind: Deployment
  # -- The number of replicas.
  replicas: 1
  strategy:
    # -- Strategy used to replace old pods.
    type: RollingUpdate
    rollingUpdate:
      # -- Specifies the maximum number of Pods that can be created over the desired number of Pods.
      maxSurge: 0
      # -- Specifies the maximum number of Pods that can be unavailable during the update process.
      maxUnavailable: 1
  # -- Additional annotations for the controller object.
  annotations: {}
  # -- Additional labels for the controller object.
  labels: {}

service:
  # -- Create a service for exposing this chart.
  enabled: true
  # -- The service type used.
  type: ClusterIP
  # -- Additional annotations for the service object.
  annotations: {}
  # -- Additional labels for the service object.
  labels: {}

ingressRoute:
  # -- Create an IngressRoute object for exposing this chart.
  create: false
  # -- List of [entry points](https://doc.traefik.io/traefik/routing/routers/#entrypoints) on which the ingress route will be available.
  entryPoints: []
  # -- [Matching rule](https://doc.traefik.io/traefik/routing/routers/#rule) for the underlying router.
  rule: ''
  # -- List of [middleware objects](https://doc.traefik.io/traefik/routing/providers/kubernetes-crd/#kind-middleware) for the ingress route.
  middlewares: []
  # -- Use an existing secret containing the TLS certificate.
  tlsSecretName: ''
  # -- Additional annotations for the ingress route object.
  annotations: {}
  # -- Additional labels for the ingress route object.
  labels: {}

certificate:
  # -- Create an Certificate object for the exposed chart.
  create: false
  # -- List of subject alternative names for the certificate.
  dnsNames: []
  # -- Name of the secret in which the certificate will be stored. Defaults to the first item in dnsNames.
  secretName: ''
  issuerRef:
    # -- Type of the referenced certificate issuer. Can be "Issuer" or "ClusterIssuer".
    kind: ClusterIssuer
    # -- Name of the referenced certificate issuer.
    name: ''
  # -- Additional annotations for the certificate object.
  annotations: {}
  # -- Additional labels for the certificate object.
  labels: {}

env:
  # -- Timezone for the container.
  - name: TZ
    value: UTC

ports:
  http:
    # -- Enable the port inside the `controller` and `Service` objects.
    enabled: true
    # -- The port used as internal port and cluster-wide port if `.service.type` == `ClusterIP`.
    port: 80
    # -- The external port used if `.service.type` == `NodePort`.
    nodePort: null
    # -- The protocol used for the service.
    protocol: TCP
  registry:
    # -- Enable the port inside the `controller` and `Service` objects.
    enabled: true
    # -- The port used as internal port and cluster-wide port if `.service.type` == `ClusterIP`.
    port: 5005
    # -- The external port used if `.service.type` == `NodePort`.
    nodePort: null
    # -- The protocol used for the service.
    protocol: TCP

configMap:
  # -- Create a new config map object.
  create: true
  # -- Mount path of the config map object.
  existingConfigMap: ''
  # -- Use an existing config map object.
  key: gitlab.rb
  # -- String containing the [configuration of gitlab]().
  config: |
    # external_url 'https://gitlab.example.com'
  # -- Additional annotations for the config map object.
  annotations: {}
  # -- Additional labels for the config map object.
  labels: {}

persistentVolumeClaims:
  secrets:
    # -- Create a new secret persistent volume claim object.
    create: true
    # -- Mount path of the secret persistent volume claim object.
    mountPath: /etc/gitlab
    # -- Storage class name for the persistent volume claim object.
    storageClassName: ''
    # -- Use an existing secret persistent volume claim object.
    existingPersistentVolumeClaim: ''
    # -- The size of the created secret persistent volume claim object.
    size: 128Mi
    # -- Additional annotations for the secret persistent volume claim object.
    annotations: {}
    # -- Additional labels for the secret persistent volume claim object.
    labels: {}
  storage:
    # -- Create a new storage persistent volume claim object.
    create: true
    # -- Mount path of the storage persistent volume claim object.
    mountPath: /var/opt/gitlab
    # -- Storage class name for the persistent volume claim object.
    storageClassName: ''
    # -- Use an existing storage persistent volume claim object.
    existingPersistentVolumeClaim: ''
    # -- The size of the created secret storage persistent volume claim object.
    size: 30Gi
    # -- Additional annotations for the storage persistent volume claim object.
    annotations: {}
    # -- Additional labels for the storage persistent volume claim object.
    labels: {}

healthCheck:
  # -- Enable health checks for the controller.
  enabled: true
  # -- Configure the internal health check whitelist of gitlab.
  whitelist:
    - 127.0.0.1

backups:
  # -- Enable backup-related volume mounts.
  enabled: true
  # -- Mount path of backups inside the container.
  mountPath: /backups
  # -- Host path to store the created backups to.
  hostPath: ''
  cronJob:
    # -- Create a `CronJob` object for automated backups.
    enabled: false
    # -- Schedule for automated backups.
    schedule: '0 3 * * 1'
    # -- Enable/disable the cron job schedule quickly.
    suspend: false
    # -- The number of successful finished jobs to retain.
    successfulJobsHistoryLimit: 3
    # -- The number of failed finished jobs to retain.
    failedJobsHistoryLimit: 1
    # -- Compute resources used by the container inside the cronjob. More info [here](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/).
    resources: {}
    # -- Additional annotations for the cronjob object.
    annotations: {}
    # -- Additional labels for the cronjob object.
    labels: {}

registryGarbageCollection:
  cronJob:
    # -- Create a `CronJob` object for automated garbage collection.
    enabled: false
    # -- Schedule for automated garbage collections.
    schedule: '0 3 * * 1'
    # -- Enable/disable the cron job schedule quickly.
    suspend: false
    # -- Include untagged manifests and unreferenced layers if set to true.
    removeUntaggedManifests: false
    # -- The number of successful finished jobs to retain.
    successfulJobsHistoryLimit: 3
    # -- The number of failed finished jobs to retain.
    failedJobsHistoryLimit: 1
    # -- Compute resources used by the container inside the cronjob. More info [here](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/).
    resources: {}
    # -- Additional annotations for the cronjob object.
    annotations: {}
    # -- Additional labels for the cronjob object.
    labels: {}

serviceAccount:
  # -- Specify the service account used for the controller.
  name: ''

rbac:
  # -- Create `Role` and `RoleBinding` objects.
  create: true
  # -- Additional annotations for the role and role binding objects.
  annotations: {}
  # -- Additional labels for the role and role binding objects.
  labels: {}

# -- Pod-level security attributes. More info [here](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#security-context).
securityContext: {}
  # fsGroup: 1000
  # runAsNonRoot: true
  # runAsGroup: 1000
  # runAsUser: 1000

# -- Compute resources used by the container. More info [here](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/).
resources: {}
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# -- Pod-level affinity. More info [here](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#scheduling).
affinity: {}
  # nodeAffinity:
  #   requiredDuringSchedulingIgnoredDuringExecution:
  #     nodeSelectorTerms:
  #       - matchExpressions:
  #           - key: kubernetes.io/hostname
  #             operator: In
  #             values:
  #               - my-node-xyz

# -- Pod-level tolerations. More info [here](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#scheduling).
tolerations: []
  # - key: node-role.kubernetes.io/control-plane
  #   operator: Exists
  #   effect: NoSchedule
